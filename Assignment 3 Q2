#Importing files
genotype = read.table('genotyping_results.txt', sep = '\t', header = T)
TOS1_effect = read.table('TOS1_variant_effect_prediction.txt', sep = '\t', header = T)
TNG1_effect = read.table('TNG1_variant_effect_prediction.txt', sep = '\t', header = T)
MEF2_effect = read.table('MEF2_variant_effect_prediction.txt', sep = '\t', header = T)

###Q2A###
#Fischers exact test for each disease and variant
library(plyr)
library(stringr)

TOS1_variants = gsub('p.', '', as.character(TOS1_effect[,1]))
TNG1_variants = gsub('p.', '', as.character(TNG1_effect[,1]))
MEF2_variants = gsub('p.', '', as.character(MEF2_effect[,1]))

variant.filt = function(x, y) { 
  variant_df = vector()
  j = 0
  for (i in x) {
    if (sum(str_count(genotype[,y], i)) > 0) {
      j = j+1
      variant_df[j] = i
    }
  }
  print(variant_df)
} 

#Selecting variants that are in the subpopulation

TOS1_variants.filt = variant.filt(TOS1_variants, 4)
TNG1_variants.filt = variant.filt(TNG1_variants, 5)
MEF2_variants.filt = variant.filt(MEF2_variants, 6)

variant_sig = function(x, genotype, y) {
  tmp_list = list()
  for (k in 1:3) { #for each disease
    j=0
    TOS1_p = data.frame()
    for (i in x) { #for each variant
      j = j + 1
      TOS1_p[j,1] = i
      TOS1_p[j,2] = fisher.test(matrix(c(table(genotype[which(str_count(genotype[,y], i) == 1),][,k])[1], table(genotype[which(str_count(genotype[,y], i) == 1),][,k])[2],table(genotype[which(str_count(genotype[,y], i) != 1),][,k])[1] , table(genotype[which(str_count(genotype[,y], i) != 1),][,k])[2]), nrow = 2, dimnames = list(c('case', 'control'), i = c('Yes' , 'No'))))$p.value
    }
    tmp_list[[k]] = TOS1_p
  }
  print(tmp_list)
}

TOS1_p.val = variant_sig(TOS1_variants.filt, genotype, 4)
TNG1_p.val = variant_sig(TNG1_variants.filt, genotype, 5)
MEF2_p.val = variant_sig(MEF2_variants.filt, genotype, 6)


#Adjusting p.value for multiple testing
TOS1_p.adjust = lapply(Map(cbind,TOS1_p.val, lapply(TOS1_p.val, function(x) x[,2] = p.adjust(x[,2], method = "bonferroni"))), function(x) x = x[,-2])

TNG1_p.adjust = lapply(Map(cbind,TNG1_p.val, lapply(TNG1_p.val, function(x) x[,2] = p.adjust(x[,2], method = "bonferroni"))), function(x) x = x[,-2])

MEF2_p.adjust = lapply(Map(cbind,MEF2_p.val, lapply(MEF2_p.val, function(x) x[,2] = p.adjust(x[,2], method = "bonferroni"))), function(x) x = x[,-2])

#Extracting p.value (not p.adjusted)
TOS1_sig = lapply(TOS1_p.val, function(x) x[which(x[,2] <= 0.05),])
TNG1_sig = lapply(TNG1_p.val, function(x) x[which(x[,2] <= 0.05),])
MEF2_sig = lapply(MEF2_p.val, function(x) x[which(x[,2] <= 0.05),])

#Extracting p.value (adjusted)
TOS1_sig_adjust = lapply(TOS1_p.adjust, function(x) x[which(x[,2] <= 0.05),])
TNG1_sig_adjust = lapply(TNG1_p.adjust, function(x) x[which(x[,2] <= 0.05),])
MEF2_sig_adjust = lapply(MEF2_p.adjust, function(x) x[which(x[,2] <= 0.05),])


###Q2B###
#Counting number of variants per individual
genotype_count = genotype

#Counting number of variants per sample
for (i in 4:6) {
  genotype_count[,i] = as.character(genotype_count[,i])
  for (j in 1:nrow(genotype_count)) {
    if (nchar(genotype_count[j,i]) == 3) {
      genotype_count[j,i] = 0
    } else {
      genotype_count[j,i] = str_count(genotype[j,i], ";") + 1
    }
  }
  genotype_count[,i] = as.numeric(genotype_count[,i])
}

#Counting number of variants per group
group_count = function(genotype_count, y) {
  tmp = data.frame()
  for (i in 1:3) {
    tmp[i,1] = sum(genotype_count[which(genotype_count[,y] > 0 & genotype_count[,i] == 'case'),][,y])
  }
  rownames(tmp) = colnames(genotype_count)[1:3]
  print(tmp)
}

TOS1_count = group_count(genotype_count, 4)
TNG1_count = group_count(genotype_count, 5)
MEF2_count = group_count(genotype_count, 6)

case_number = c(nrow(genotype[which(genotype[,1] == 'case'),]), nrow(genotype[which(genotype[,2] == 'case'),]), nrow(genotype[which(genotype[,3] == 'case'),]))

#Randomly sampling from rows
sample_ctrl = function(genotype_count, x, n, iteration_no, z, threshold) { #x is the column corresponding to disease, n is number of samples, y is number of iterations, z is column corresponding to variant of interest, treshold is the burden value for variant in given disease
  tmp_df = data.frame()
  iteration = 0
  for (i in 1:iteration_no) {
    iteration = iteration + 1
    tmp = genotype_count[sample(nrow(genotype_count[which(genotype_count[,x] == 'ctrl'),]), n), ]
    tmp_df[i,1] = colSums(tmp[z])
  }
  p_val = length(tmp_df[which(tmp_df > threshold),])/iteration_no
  if (p_val < 1/iteration_no) {
    p_val = 1/iteration_no
  }
  print(p_val)
}

p_count = data.frame(c(0,0,0), c(0,0,0), c(0,0,0))
colnames(p_count) = colnames(genotype_count)[4:6]
rownames(p_count) = colnames(genotype_count)[1:3]

p_count[1,1] = sample_ctrl(genotype_count, 1, 100, 10000, 4, 21) #TOS1 KS
p_count[2,1] = sample_ctrl(genotype_count, 2, 20, 10000, 4, 7)
p_count[3,1] = sample_ctrl(genotype_count, 3, 20, 10000, 4, 8)

p_count[1,2] = sample_ctrl(genotype_count, 1, 100, 10000, 5, 8) #TNG1 KS
p_count[2,2] = sample_ctrl(genotype_count, 2, 20, 10000, 5, 12)
p_count[3,2] = sample_ctrl(genotype_count, 3, 20, 10000, 5, 3)

p_count[1,3] = sample_ctrl(genotype_count, 1, 100, 10000, 6, 6) #MEF2 KS
p_count[2,3] = sample_ctrl(genotype_count, 2, 20, 10000, 6, 3)
p_count[3,3] = sample_ctrl(genotype_count, 3, 20, 10000, 6, 2)

p_count

###Q2c###
#Calculating burden per case for each variant
calc_burden = function(genotype ,y, variant_effect) { #y = column corresponding to variatn of interest 
  tmp = gsub('p.', '', genotype[,y]) 
  tmp = gsub('\\[', '', tmp)
  tmp = gsub(']', '', tmp)
  tmp = str_split_fixed(tmp, ';', n = 6)
  variant_effect[,1] = gsub('p.', '', variant_effect[,1])
  for (i in 1:6) {
    tmp[,i] = variant_effect[,2][match(tmp[,i], variant_effect[,1])]
  }
  tmp[is.na(tmp)] = 0
  tmp = as.data.frame(tmp, stringsAsFactors = F)
  for (i in 1:6) {
    tmp[,i] = as.numeric(as.character(tmp[,i]))
  }
  sums = rowSums(tmp)
  print(sums)
}

genotype_burden = genotype
genotype_burden[,4] = calc_burden(genotype, 4, TOS1_effect)
genotype_burden[,5] = calc_burden(genotype, 5, TNG1_effect)
genotype_burden[,6] = calc_burden(genotype, 6, MEF2_effect)


#Calculating total burden per disease group per variant
burden_count = function(genotype_burden, y) {
  tmp = data.frame()
  for (i in 1:3) {
    tmp[i,1] = sum(genotype_burden[which(genotype_burden[,y] > 0 & genotype_burden[,i] == 'case'),][,y])
  }
  rownames(tmp) = colnames(genotype_burden)[1:3]
  print(tmp)
}

TOS1_burden = burden_count(genotype_burden, 4)
TNG1_burden = burden_count(genotype_burden, 5)
MEF2_burden = burden_count(genotype_burden, 6)

#Sampling burdens from controls
ctrl_burden = function(genotype_burden, x, n, iteration_no, z, threshold) { #x is the column corresponding to disease, n is number of samples, y is number of iterations, z is column corresponding to variant of interest, treshold is the burden value for variant in given disease
  tmp_df = data.frame()
  iteration = 0
  for (i in 1:iteration_no) {
    tmp = genotype_burden[sample(nrow(genotype_burden[which(genotype_burden[,x] == 'ctrl'),]), n), ]
    tmp_df[i,1] = colSums(tmp[z])
  }
  p_val = length(tmp_df[which(tmp_df > threshold),])/iteration_no
  if (p_val < 1/iteration_no) {
    p_val = 1/iteration_no
  }
  print(p_val)
}

p_burden = data.frame(c(0,0,0), c(0,0,0), c(0,0,0))
colnames(p_burden) = colnames(genotype_burden)[4:6]
rownames(p_burden) = colnames(genotype_burden)[1:3]

p_burden[1,1] = ctrl_burden(genotype_burden, 1, 100, 10000, 4, 6.62095)
p_burden[2,1] = ctrl_burden(genotype_burden, 2, 20, 10000, 4, 3.76620)
p_burden[3,1] = ctrl_burden(genotype_burden, 3, 20, 10000, 4, 5.88650)

p_burden[1,2] = ctrl_burden(genotype_burden, 1, 100, 10000, 5, 2.28673)
p_burden[2,2] = ctrl_burden(genotype_burden, 2, 20, 10000, 5, 4.51960)
p_burden[3,2] = ctrl_burden(genotype_burden, 3, 20, 10000, 5, 0.11451)

p_burden[1,3] = ctrl_burden(genotype_burden, 1, 100, 10000, 6, 3.17119)
p_burden[2,3] = ctrl_burden(genotype_burden, 2, 20, 10000, 6, 1.83800)
p_burden[3,3] = ctrl_burden(genotype_burden, 3, 20, 10000, 6, 0.27720)

p_burden
