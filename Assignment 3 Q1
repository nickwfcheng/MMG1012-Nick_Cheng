###R###
library(dplyr)

#Choosing random snps - Bash
for i in *.gz; do gunzip -cd $i | awk '{ print $1 }' > $i.snplist.txt; done

#Extracting snp list to count number of common snps
cp ASW.hmap.gz.snplist.txt common_snps.tsv
for i in *.txt; do grep -Fxf $i common_snps.tsv > common_snps.tsv; done
wc -l common_snps.tsv

#Choosing random snps - R
#Sampling random snps
select_vector = c(1:24625) #There are 24625 common snps across the 6 subpopulations
sampling = sample(x = select_vector, size = 5000, replace = F)
sample_lines = paste(sampling, collapse = 'p;')
qsnps = data.frame(c('rs683', 'rs910'))
snp_list = read.table('common_snps.tsv', header = T)
snp_list1 = snp_list[sampling[1:1000],]
snp_list2 = snp_list[sampling[1001:2000],]
snp_list3 = snp_list[sampling[2001:3000],]
snp_list4 = snp_list[sampling[3001:4000],]
snp_list5 = snp_list[sampling[4001:5000],]
snp_list1 = paste(snp_list1, sep = '|', collapse = '|')
snp_list2 = paste(snp_list2, sep = '|', collapse = '|')
snp_list3 = paste(snp_list3, sep = '|', collapse = '|')
snp_list4 = paste(snp_list4, sep = '|', collapse = '|')
snp_list5 = paste(snp_list5, sep = '|', collapse = '|')


#Choosing list of snps - Bash, the output from snp_list is used as input for grep command
for i in *.gz; do gunzip -c $i | grep -E -w '' > "$i.filt1.txt"; done
for i in *.gz; do gunzip -c $i | grep -E -w '' > "$i.filt2.txt"; done
for i in *.gz; do gunzip -c $i | grep -E -w '' > "$i.filt3.txt"; done
for i in *.gz; do gunzip -c $i | grep -E -w '' > "$i.filt4.txt"; done
for i in *.gz; do gunzip -c $i | grep -E -w '' > "$i.filt5.txt"; done
for i in *.gz; do gunzip -c $i | grep -E -w "rs683 | rs910" >"$i.filt6.txt"; done

#Importing files
hmap_files1 = list.files(pattern = "*1.txt") #Importing filenames
hmap_files2 = list.files(pattern = "*2.txt")
hmap_files3 = list.files(pattern = "*3.txt")
hmap_files4 = list.files(pattern = "*4.txt")
hmap_files5 = list.files(pattern = "*5.txt")
hmap_files6 = list.files(pattern = "*6.txt")

#Calculating genotype count
library(dplyr)
library(ggplot2)
library(reshape2)
library(gridExtra)

question1a <- function(hmap_files) {
  hmap_snps = lapply(hmap_files, read.table, sep = '', header = F, stringsAsFactors = F) #Importing files
  hmap_snps = lapply(hmap_snps, function(x) (x[,c(1, 12:ncol(x))])) #Keeping columns of interest
  for (i in 1:length(hmap_snps)){ #Renaming first column of each subpopulation
    colnames(hmap_snps[[i]])[1] = 'snp'
  }
  
  #Filtering in common snps
  common_snps = as.data.frame(hmap_snps[[1]][,1], stringsAsFactors = F) #creating list of common snps
  colnames(common_snps) = 'snp'
  for (i in 2:length(hmap_snps)) { #Identifying list of common snps
    tmp = as.data.frame(hmap_snps[[i]][,1], stringsAsFactors = F, col.names = 'snp')
    colnames(tmp)[1] = 'snp'
    common_snps = inner_join(common_snps, tmp, by = 'snp')
  } 
  
  hmap_snp_common = lapply(hmap_snps, function(x) semi_join(x, common_snps)) #Removing unmatching snps
  
  #Counting haplotypes per subpopulation for each snp
  hmap_snp_common = lapply(hmap_snp_common, function(x) t(x[,-1])) #Transposing table such that each each column corresponds to snp
  snp_list = list()
  for (i in 1:nrow(common_snps)) { #Joining snps per subpopulation together within lists
    snp_list[[i]] = lapply(hmap_snp_common, function(x) x[,i])
    snp_list[[i]] = lapply(snp_list[[i]], table)
    names(snp_list[[i]]) = gsub('.hmap.gz.filt.txt', '', hmap_files)
  }
  names(snp_list) = common_snps[,1]
  print(snp_list)
  table_snps <- function(y) {
    tmp = y
    tmp = mapply(data.frame,Words=seq_along(tmp), tmp ,SIMPLIFY=FALSE,MoreArgs=list(stringsAsFactors=FALSE))
    tmp = do.call(rbind, tmp)
    tmp = reshape(tmp, timevar= 'Words', idvar = 'Var1', direction = 'wide')
    tmp[is.na(tmp)] = 0
    tmp = tmp[-4,]
    rownames(tmp) = as.character(tmp[,1])
    tmp = t(tmp[,-1])
    rownames(tmp) = substr(hmap_files, start = 1, stop = 3)
    print(tmp)
  }
  tmp1 = lapply(snp_list, function(x) table_snps(x))
  print(tmp1)
}
q1a_haplotype = question1a(hmap_files6)
q1a_haplotype = lapply(q1a_haplotype, function(x) {x/(rowSums(x))})
q1a_haplotype = lapply(q1a_haplotype, function(x) {x/(rowSums(x))})

rs683 = cbind(rownames(q1a_haplotype[[1]]), data.frame(q1a_haplotype[[1]]))
rs910 = cbind(rownames(q1a_haplotype[[2]]), data.frame(q1a_haplotype[[2]]))

#Plotting genotype count
rs683_melt = melt(rs683)
rs910_melt = melt(rs910)

colnames(rs683_melt) = c('Subpopulation', 'Genotype', 'Proportion')
colnames(rs910_melt) = c('Subpopulation', 'Genotype', 'Proportion')

rs683_plot = ggplot(rs683_melt, aes(x = Subpopulation, y= Proportion, fill = Genotype)) + geom_bar(stat = 'identity') + ggtitle('rs683') + theme(axis.title.x=element_blank())  +  scale_y_continuous(expand = c(0, 0)) 

rs910_plot = ggplot(rs910_melt, aes(x = Subpopulation, y= Proportion, fill = Genotype)) + geom_bar(stat = 'identity') + ggtitle('rs910')  + theme(axis.title.x=element_blank())  +  scale_y_continuous(expand = c(0, 0)) + theme(legend.position="bottom")
g_legend<-function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)}
snp_legend = g_legend(rs910_plot)
grid.arrange(arrangeGrob(rs683_plot + theme(legend.position="none"),
                         rs910_plot + theme(legend.position="none"), 
                         nrow=1),
             snp_legend, nrow=2,heights=c(5, 1))

#Calculating Fst

question1b <- function(hmap_files) {
  hmap_snps = lapply(hmap_files, read.table, sep = '', header = F, stringsAsFactors = F) #Importing files
  hmap_snps = lapply(hmap_snps, function(x) (x[,c(1, 12:ncol(x))])) #Keeping columns of interest
  for (i in 1:length(hmap_snps)){ #Renaming first column of each subpopulation
    colnames(hmap_snps[[i]])[1] = 'snp'
  }
  
  #Filtering in common snps
  common_snps = as.data.frame(hmap_snps[[1]][,1], stringsAsFactors = F) #creating list of common snps
  colnames(common_snps) = 'snp'
  for (i in 2:length(hmap_snps)) { #Identifying list of common snps
    tmp = as.data.frame(hmap_snps[[i]][,1], stringsAsFactors = F, col.names = 'snp')
    colnames(tmp)[1] = 'snp'
    common_snps = inner_join(common_snps, tmp, by = 'snp')
  } 
  
  hmap_snp_common = lapply(hmap_snps, function(x) semi_join(x, common_snps)) #Removing unmatching snps
  
  #Counting haplotypes per subpopulation for each snp
  hmap_snp_common = lapply(hmap_snp_common, function(x) t(x[,-1])) #Transposing table such that each each column corresponds to snp
  snp_list = list()
  for (i in 1:nrow(common_snps)) { #Joining snps per subpopulation together within lists
    snp_list[[i]] = lapply(hmap_snp_common, function(x) x[,i])
    snp_list[[i]] = lapply(snp_list[[i]], table)
    names(snp_list[[i]]) = gsub('.hmap.gz.filt.txt', '', hmap_files)
  }
  names(snp_list) = common_snps[,1]
  
  #Fst Calculation
  fst_calc = function(x, z) {
    table_snps <- function(y, z) {
      tmp = y
      tmp = mapply(data.frame,Words=seq_along(tmp), tmp ,SIMPLIFY=FALSE,MoreArgs=list(stringsAsFactors=FALSE))
      tmp = do.call(rbind, tmp)
      tmp = reshape(tmp, timevar= 'Words', idvar = 'Var1', direction = 'wide')
      tmp[is.na(tmp)] = 0
      tmp = tmp[-4,]
      rownames(tmp) = as.character(tmp[,1])
      tmp = t(tmp[,-1])
      rownames(tmp) = substr(z, start = 1, stop = 3)
      print(tmp)
    }
    tmp1 = lapply(x, function(x) table_snps(x, z))
    calc_fst = function(b) { 
      #Step 1
      n_genotyped = rowSums(b)
      allele_freq = data.frame()
      allele_freq[1:nrow(b),1] = ((b[,1]*2) + b[,2])/(2*n_genotyped)
      allele_freq[1:nrow(b),2] = 1 - allele_freq[,1] 
      colnames(allele_freq) = strsplit(colnames(b)[2], '')[[1]]
      
      #Step 4
      local_expected_hetero = data.frame()
      local_expected_hetero[1:nrow(b),1] = 1 - ((allele_freq[,1])^2 + (allele_freq[,2])^2)
      
      #Step 6 
      P_bar = (colSums(b)[1]*2 + colSums(b)[2])/(2*sum(n_genotyped))
      
      #Step 7
      Q_bar = (colSums(b)[3]*2 + colSums(b)[2])/(2*sum(n_genotyped))
      
      #Step 8 
      H_indices = data.frame()
      H_S = sum(local_expected_hetero*n_genotyped)/sum(b)
      H_T = 2*P_bar*Q_bar
      
      #Step 9
      F_ST = (H_T-H_S)/H_T
      print(F_ST)
    }
    tmp2 = lapply(tmp1, function(x) calc_fst(x))
    tmp2 = unlist(tmp2)
    print(tmp2)
  }
  snp_fst = fst_calc(snp_list,  hmap_files)
  snp_fst = data.frame(snp_fst)
  snp_fst = (cbind(data.frame(rownames(snp_fst)), snp_fst))
  snp_fst[,1] = gsub('\\..*', '', (snp_fst[,1]))
  colnames(snp_fst) = c('snp', 'hst')
  print(snp_fst)
}

hst1 = question1b(hmap_files1)
hst2 = question1b(hmap_files2)
hst3 = question1b(hmap_files3)
hst4 = question1b(hmap_files4)
hst5 = question1b(hmap_files5)
hst6 = question1b(hmap_files6)

hst_all = rbind(hst6, hst1, hst2, hst3, hst4, hst5)

hst_melt = melt(hst_all)
colnames(hst_melt)[3] = 'Fst_value'
hst_melt[3:nrow(hst_melt),1] = ""
hst_melt[1:2,1] = c('rs683 (Fst = 0.082)', 'rs910 (Fst = 0.109)')

fst_freq_plot = ggplot(hst_melt, aes(x=Fst_value, col=variable)) + geom_freqpoly(binwidth = 0.0035, colour = "#990033") + xlab('Fst') + ylab('Snp Count') + scale_y_continuous(expand= c(0,0)) + scale_x_continuous(expand = c(0,0))

hst6_labs = hst6
hst6_labs = cbind(c('hst', 'hst'), hst6_labs)
colnames(hst6_labs) = c('variable', 'snp', 'value')
hst6_labs = hst6_labs[,c(2, 1, 3)]

fst_box = ggplot(hst_melt, aes(y = Fst_value, x = variable)) + geom_boxplot(colour = "#6699CC") + geom_point(data = hst6_labs, aes(x=variable, y=value, col = "9966CC")) + geom_text(aes(label = snp, hjust = -0.25, vjust = 0.2))+ theme(legend.position="none") + xlab('') + scale_y_continuous(expand= c(0,0)) + ylab('Fst') + scale_x_discrete(labels=c('All Snps'))


grid.arrange(fst_freq_plot, fst_box, nrow = 1)



